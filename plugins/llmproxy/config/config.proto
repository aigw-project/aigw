// Copyright The AIGW Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package plugins.ai_proxy.config;

import "validate/validate.proto";
import "plugins/api/v1/header.proto";

option go_package = "github.com/aigw-project/aigw/plugins/ai_proxy/config";

message Config {
  string protocol = 1 [(validate.rules).string = {min_len: 1}];
  string algorithm = 2 [(validate.rules).string = {min_len: 1}];
  // 3, 4: deprecated
  map<string, Rules> model_mapping_rule = 5;
  LogConfig log = 6;
  map<string, LBConfig> lb_mapping_rule = 7;
}

// proto doesn't support repeated value in map, so we have to wrap it in a new message
message Rules {
  repeated Rule rules = 1 [(validate.rules).repeated = {min_items: 1}];
}

message LBConfig{
  bool load_aware_enable = 1;
  bool cache_aware_enable = 2;
  int32 candidate_percent = 3 [(validate.rules).int32 = {gte: 0, lte: 100}];
  int32 request_load_weight = 4;
  int32 prefill_load_weight = 5;
  int32 cache_radio_weight = 6;
}

message Rule {
  int32 weight = 1; // deprecated
  string scene_name = 2 [(validate.rules).string = {max_len: 128}];
  string chain_name = 3 [(validate.rules).string = {max_len: 128}];
  // 4: deprecated
  string backend = 7 [(validate.rules).string = {min_len: 1, max_len: 256}];
  string route_name = 8 [(validate.rules).string = {max_len: 512}];
  // headers for matching request
  repeated api.v1.HeaderValue  headers = 9;
  // subsets for filtering backend endpoints
  repeated Subset subset = 10;
  string cluster = 11 [(validate.rules).string = {min_len: 1, max_len: 256}];
}

message Subset {
  string name = 1;
  map<string, string> labels = 2;
  string lora = 3; // for lora name
  int32 weight = 4;
}

message LogConfig {
  bool enabled = 1;
  string path = 2;
}
